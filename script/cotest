#!/bin/bash

valgrind="valgrind --error-exitcode=2 --leak-check=full --errors-for-leak-kinds=all --quiet"

docobalt() {
	dorun $cobalt $@
}

# Execute a command, optionally under valgrind. If the command fails, exit and
# print out the error.
dorun() {
	if [ -z $V ]; then
		res=`LD_PRELOAD=$lib $@ 2>&1`
	else
		res=`LD_PRELOAD=$lib ${valgrind} $@ 2>&1`
	fi
	rc=$?

	if [ $rc != 0 ]; then
		echo "$res"
		exit $rc
	else
		echo PASS > $output
	fi
}

# Set up and enter the test fixture
setup_fixture() {
	rm -rf ${F}
	mkdir -p ${F}
	pushd ${F} >/dev/null
}

# Exit and tear down the test fixture
teardown_fixture() {
	popd >/dev/null
	rm -rf ${F}
}

# Automatically fail the test if the run_test function is not overloaded
run_test() {
	echo 'no test procedure defined!' 1>&2
	exit 1
}

usage() {
	echo "usage: $0 [-f <fixture>] [-l <library>] [-r] [-v] <cotest>" 1>&2
}

L='libcobalt.so'
F='.cotest'
O='.cotest/stdout'
R=''
V=''
while getopts 'f:l:o:rv' opt; do
	case $opt in
	l)	L="$OPTARG"
		;;
	f)	F="$OPTARG"
		;;
	o)	O="$OPTARG"
		;;
	r)	R=1
		;;
	v)	V=1
		;;
	*)	usage
		;;
	esac
done
shift $(($OPTIND - 1))

cotest="$PWD/$1"
output="$PWD/$O"
lib="$PWD/$L"
cobalt="$PWD/cobalt"

if [ ! -z $R ]; then
	setup_fixture
	dorun $cotest
	teardown_fixture
else
	source $cotest
	setup_fixture
	run_test
	teardown_fixture
fi

